import "./chunk-5WWUZCGV.js";

// node_modules/@revolut/checkout/esm/constants.js
var _a;
var LOCALES = [
  "en",
  "en-US",
  "nl",
  "fr",
  "de",
  "cs",
  "it",
  "lt",
  "pl",
  "pt",
  "es",
  "hu",
  "sk",
  "ja",
  "sv",
  "bg",
  "ro",
  "ru",
  "el",
  "hr",
  "tr"
];
var MODE = {
  PRODUCTION: "prod",
  DEVELOPMENT: "dev",
  SANDBOX: "sandbox"
};
var URLS = (_a = {}, _a[MODE.SANDBOX] = {
  embed: "https://sandbox-merchant.revolut.com/embed.js",
  version: "https://sandbox-merchant.revolut.com/version.js",
  upsell: "https://sandbox-merchant.revolut.com/upsell/embed.js"
}, _a[MODE.PRODUCTION] = {
  embed: "https://merchant.revolut.com/embed.js",
  version: "https://merchant.revolut.com/version.js",
  upsell: "https://merchant.revolut.com/upsell/embed.js"
}, _a[MODE.DEVELOPMENT] = {
  embed: "https://merchant.revolut.codes/embed.js",
  version: "https://merchant.revolut.codes/version.js",
  upsell: "https://merchant.revolut.codes/upsell/embed.js"
}, _a);
var REVOLUT_PAY_ORDER_ID_URL_PARAMETER = "_rp_oid";
var REVOLUT_PAY_SUCCESS_REDIRECT_URL_PARAMETER = "_rp_s";
var REVOLUT_PAY_FAILURE_REDIRECT_URL_PARAMETER = "_rp_fr";

// node_modules/@revolut/checkout/esm/utils.js
var pendingScripts = {};
function loadScript(_a2) {
  var src = _a2.src, id = _a2.id, name = _a2.name;
  if (pendingScripts[src]) {
    return pendingScripts[src];
  }
  var script = document.createElement("script");
  script.id = id;
  script.src = src;
  script.async = true;
  var promise = new Promise(function(resolve, reject) {
    function handleError(reason) {
      document.head.removeChild(script);
      delete pendingScripts[src];
      reject(new Error("'" + name + "' failed to load: " + reason));
    }
    function handleLoad() {
      document.head.removeChild(script);
      resolve();
    }
    script.onload = handleLoad;
    script.onerror = function() {
      return handleError("Network error encountered");
    };
  });
  document.head.appendChild(script);
  pendingScripts[src] = promise;
  return promise;
}
function getVersionedUrl(url, version) {
  var queryParams = version ? new URLSearchParams({ version }).toString() : "";
  return "" + url + (queryParams ? "?" + queryParams : "");
}

// node_modules/@revolut/checkout/esm/versionLoader.js
var loadedVersion = null;
var pendingTimestamp = null;
function RevolutPaymentsVersionLoader(mode) {
  if (mode === void 0) {
    mode = RevolutPaymentsVersionLoader.mode;
  }
  if (typeof loadedVersion === "string") {
    return Promise.resolve(loadedVersion);
  }
  pendingTimestamp = pendingTimestamp !== null && pendingTimestamp !== void 0 ? pendingTimestamp : Date.now();
  return loadScript({
    src: getVersionedUrl(URLS[mode].version, "" + pendingTimestamp),
    id: "revolut-pay-version",
    name: "RevolutPayVersion"
  }).then(function() {
    pendingTimestamp = null;
    if (typeof loadedVersion !== "string" || !loadedVersion) {
      loadedVersion = "__REV_PAY_VERSION__" in window && typeof __REV_PAY_VERSION__ === "string" ? __REV_PAY_VERSION__ : "";
      delete window.__REV_PAY_VERSION__;
    }
    return loadedVersion;
  }).catch(function() {
    pendingTimestamp = null;
    loadedVersion = "";
    return loadedVersion;
  });
}
RevolutPaymentsVersionLoader.mode = MODE.PRODUCTION;

// node_modules/@revolut/checkout/esm/paymentsLoader.js
var loadedPaymentInstance = null;
function RevolutPaymentsLoader(token, mode, locale) {
  if (mode === void 0) {
    mode = RevolutPaymentsLoader.mode;
  }
  if (loadedPaymentInstance) {
    var instance = loadedPaymentInstance({ publicToken: token, locale });
    return Promise.resolve(instance);
  }
  return RevolutPaymentsVersionLoader(mode).then(function(version) {
    return loadRevolutCheckout(version, mode, "RevolutPayments");
  }).then(function(revolutCheckout) {
    loadedPaymentInstance = revolutCheckout.payments;
    return revolutCheckout.payments({ publicToken: token, locale });
  });
}
RevolutPaymentsLoader.mode = MODE.PRODUCTION;

// node_modules/@revolut/checkout/esm/upsellLoader.js
var loadedUpsellInstance = null;
function RevolutUpsellLoader(token, mode, locale) {
  if (mode === void 0) {
    mode = RevolutUpsellLoader.mode;
  }
  if (loadedUpsellInstance) {
    var instance = loadedUpsellInstance({ publicToken: token, locale });
    return Promise.resolve(instance);
  }
  return RevolutPaymentsVersionLoader(mode).then(function(version) {
    return loadRevolutUpsell(version, mode);
  }).then(function(revolutUpsell) {
    return revolutUpsell({ publicToken: token, locale });
  });
}
function loadRevolutUpsell(version, mode) {
  return loadScript({
    src: getVersionedUrl(URLS[mode].upsell, version),
    id: "revolut-upsell",
    name: "RevolutUpsell"
  }).then(function() {
    if (loadedUpsellInstance) {
      return loadedUpsellInstance;
    } else if (typeof RevolutUpsell === "function") {
      loadedUpsellInstance = RevolutUpsell;
      delete window.RevolutUpsell;
      return loadedUpsellInstance;
    } else {
      throw new Error("'RevolutUpsell' failed to load: RevolutUpsell is not a function");
    }
  });
}
RevolutUpsellLoader.mode = MODE.PRODUCTION;

// node_modules/@revolut/checkout/esm/loader.js
var loaded = null;
function RevolutCheckoutLoader(token, mode) {
  if (mode === void 0) {
    mode = RevolutCheckoutLoader.mode;
  }
  if (loaded) {
    return Promise.resolve(loaded(token));
  }
  return RevolutPaymentsVersionLoader(mode).then(function(version) {
    return loadRevolutCheckout(version, mode, "RevolutCheckout");
  }).then(function(revolutCheckout) {
    return revolutCheckout(token);
  });
}
function loadRevolutCheckout(version, mode, scriptName) {
  return loadScript({
    src: getVersionedUrl(URLS[mode].embed, version),
    id: "revolut-checkout",
    name: scriptName
  }).then(function() {
    if (loaded) {
      return loaded;
    }
    if (typeof RevolutCheckout === "function") {
      loaded = RevolutCheckout;
      delete window.RevolutCheckout;
      return loaded;
    } else {
      throw new Error("'" + scriptName + "' failed to load: RevolutCheckout is not a function");
    }
  });
}
RevolutCheckoutLoader.mode = MODE.PRODUCTION;
RevolutCheckoutLoader.payments = function(_a2) {
  var locale = _a2.locale, publicToken = _a2.publicToken, _b = _a2.mode, mode = _b === void 0 ? RevolutCheckoutLoader.mode : _b;
  return RevolutPaymentsLoader(publicToken, mode, locale);
};
RevolutCheckoutLoader.upsell = function(_a2) {
  var locale = _a2.locale, publicToken = _a2.publicToken, _b = _a2.mode, mode = _b === void 0 ? RevolutCheckoutLoader.mode : _b;
  return RevolutUpsellLoader(publicToken, mode, locale);
};

// node_modules/@revolut/checkout/esm/checks.js
function isValidationError(error) {
  return error != null && error.name === "Validation";
}
function isRevolutCheckoutError(error) {
  return error != null && error.name === "RevolutCheckout";
}
function isValidLocale(locale) {
  return locale && LOCALES.some(function(value) {
    return value === locale;
  });
}

// node_modules/@revolut/checkout/esm/helpers.js
var getSearchParamsByName = function(name) {
  return new URLSearchParams(window.location.search).get(name);
};
var getRevolutPayOrderIdURLParam = function() {
  return getSearchParamsByName(REVOLUT_PAY_ORDER_ID_URL_PARAMETER);
};
var getRevolutPaySuccessURLParam = function() {
  return getSearchParamsByName(REVOLUT_PAY_SUCCESS_REDIRECT_URL_PARAMETER);
};
var getRevolutPayFailureURLParam = function() {
  return getSearchParamsByName(REVOLUT_PAY_FAILURE_REDIRECT_URL_PARAMETER);
};
export {
  RevolutCheckoutLoader as default,
  getRevolutPayFailureURLParam,
  getRevolutPayOrderIdURLParam,
  getRevolutPaySuccessURLParam,
  isRevolutCheckoutError,
  isValidLocale,
  isValidationError
};
//# sourceMappingURL=@revolut_checkout.js.map
